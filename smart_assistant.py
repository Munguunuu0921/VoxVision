import torch
import cv2
import os
import numpy as np

# üß† YOLOv5 –∑–∞–≥–≤–∞—Ä—ã–≥ –∞—á–∞–∞–ª–ª–∞—Ö
model = torch.hub.load('ultralytics/yolov5', 'yolov5s', verbose=False)

# üé• –ö–∞–º–µ—Ä –∞—Å–∞–∞—Ö (0 –±–æ–ª default webcam)
cap = cv2.VideoCapture(0)

# –î“Ø—Ä—Å–Ω–∏–π ”©—Ä–≥”©–Ω–∏–π–≥ –∞–≤–∞—Ö (–∑—É—Ä–∞–≥–Ω—ã —Ç”©–≤–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö)
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
center_x = frame_width // 2

# üé® –ì—ç—Ä–ª—ç–Ω –¥–æ—Ö–∏–æ–Ω—ã ”©–Ω–≥”© —à–∞–ª–≥–∞—Ö —Ñ—É–Ω–∫—Ü
def get_dominant_color(cropped_img):
    hsv = cv2.cvtColor(cropped_img, cv2.COLOR_BGR2HSV)
    avg_color = hsv.mean(axis=0).mean(axis=0)
    h = avg_color[0]
    if 0 <= h <= 25:
        return 'red'
    elif 26 <= h <= 35:
        return 'yellow'
    elif 36 <= h <= 85:
        return 'green'
    else:
        return 'unknown'

# üîÅ Real-time loop
while True:
    ret, frame = cap.read()
    if not ret:
        break

    # YOLO-—Ä –±“Ø—Ö –æ–±—å–µ–∫—Ç —Ç–∞–Ω–∏—Ö
    results = model(frame)
    names = results.names
    detections = results.xyxy[0]
    messages = []

    # –ò–ª—ç—Ä—Å—ç–Ω –æ–±—å–µ–∫—Ç –±“Ø—Ä–∏–π–≥ —à–∞–ª–≥–∞—Ö
    for *box, conf, cls in detections:
        x1, y1, x2, y2 = map(int, box)
        class_name = names[int(cls)]
        x_center = (x1 + x2) // 2
        side = "left" if x_center < center_x else "right"

        # üö¶ –ì—ç—Ä–ª—ç–Ω –¥–æ—Ö–∏–æ –±–æ–ª ”©–Ω–≥”© —Ç–∞–Ω–∏—Ö
        if class_name == "traffic light":
            cropped = frame[y1:y2, x1:x2]
            color = get_dominant_color(cropped)
            messages.append(f"Traffic light is {color}")

        # üö∏ –ó–∞–º—ã–Ω —Ç—ç–º–¥—ç–≥ –±–æ–ª —à—É—É–¥ —Ö—ç–ª—ç—Ö
        elif "sign" in class_name or "traffic" in class_name:
            messages.append(f"Road sign detected: {class_name}")

        # üß± –ë—É—Å–∞–¥ –æ–±—å–µ–∫—Ç—É—É–¥
        else:
            messages.append(f"{class_name} on the {side}, go {'right' if side == 'left' else 'left'}")

    # üó£ –ò–ª—ç—Ä—Å—ç–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ Mac-–∏–π–Ω `say` –∫–æ–º–º–∞–Ω–¥–∞–∞—Ä —Ö—ç–ª—ç—Ö
    if messages:
        full_message = " | ".join(messages)
        print("üëâ", full_message)
        os.system(f"say '{full_message}'")

    # üñº Bounding box-—É—É–¥—Ç–∞–π –¥“Ø—Ä—Å–∏–π–≥ —Ö–∞—Ä—É—É–ª–∞—Ö
    results.render()
    cv2.imshow("Smart Assistant", results.ims[0])

    # 'q' –¥–∞—Ä–≤–∞–ª –≥–∞—Ä–∞—Ö
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# üßπ –ö–∞–º–µ—Ä –±–æ–ª–æ–Ω —Ü–æ–Ω—Ö —Ö–∞–∞—Ö
cap.release()
cv2.destroyAllWindows()
