import torch
import cv2
import os
import numpy as np


model = torch.hub.load('ultralytics/yolov5', 'yolov5s', verbose=False)


image_path = "img9.png" 
image = cv2.imread(image_path)

if image is None:
    print("‚ùå –ó—É—Ä–∞–≥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –ó–∞–º—ã–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É.")
    exit()

# –¢”©–≤–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö
frame_width = image.shape[1]
center_x = frame_width // 2

# –ì—ç—Ä–ª—ç–Ω –¥–æ—Ö–∏–æ–Ω—ã ”©–Ω–≥”© —Ç–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü
def get_dominant_color(cropped_img):
    hsv = cv2.cvtColor(cropped_img, cv2.COLOR_BGR2HSV)
    avg_color = hsv.mean(axis=0).mean(axis=0)
    h = avg_color[0]
    if 0 <= h <= 25:
        return 'red'
    elif 26 <= h <= 35:
        return 'yellow'
    elif 36 <= h <= 85:
        return 'green'
    else:
        return 'unknown'

# üß† –ó—É—Ä–∞–≥–Ω–∞–∞—Å –±“Ø—Ö –æ–±—å–µ–∫—Ç –∏–ª—Ä“Ø“Ø–ª—ç—Ö
results = model(image)
names = results.names
detections = results.xyxy[0]
messages = []

# üîÅ –ò–ª—ç—Ä—Å—ç–Ω –æ–±—å–µ–∫—Ç –±“Ø—Ä–∏–π–≥ —à–∞–ª–≥–∞—Ö
for *box, conf, cls in detections:
    x1, y1, x2, y2 = map(int, box)
    class_name = names[int(cls)]
    x_center = (x1 + x2) // 2
    side = "left" if x_center < center_x else "right"

    # üö¶ –ì—ç—Ä–ª—ç–Ω –¥–æ—Ö–∏–æ –±–æ–ª ”©–Ω–≥–∏–π–≥ –Ω—å —Ö—ç–ª—ç—Ö
    if class_name == "traffic light":
        cropped = image[y1:y2, x1:x2]
        color = get_dominant_color(cropped)
        messages.append(f"Traffic light is {color}")

    # üö∏ –ó–∞–º—ã–Ω —Ç—ç–º–¥—ç–≥ (road sign) –±–æ–ª —à—É—É–¥ —Ö—ç–ª—ç—Ö
    elif "sign" in class_name or "traffic" in class_name:
        messages.append(f"Road sign detected: {class_name}")

    # üß± –ë—É—Å–∞–¥ –æ–±—å–µ–∫—Ç—É—É–¥—ã–≥ –±–∞–π—Ä–ª–∞–ª–∞–∞—Ä —Ö—ç–ª—ç—Ö
    else:
        messages.append(f"{class_name} on the {side}, go {'right' if side == 'left' else 'left'}")

# üó£ –¢–∞–Ω–∏–≥–¥—Å–∞–Ω –∑“Ø–π–ª—Å–∏–π–≥ Mac-–∏–π–Ω `say` –∫–æ–º–∞–Ω–¥—ã–≥ –∞—à–∏–≥–ª–∞–Ω —Ö—ç–ª—ç—Ö
if messages:
    full_message = " | ".join(messages)
    print("üó£", full_message)
    os.system(f"say '{full_message}'")

# üñº –ò–ª—ç—Ä—Å—ç–Ω –æ–±—å–µ–∫—Ç—É—É–¥—Ç–∞–π –∑—É—Ä–≥—ã–≥ —Ö–∞—Ä—É—É–ª–∞—Ö
results.render()
cv2.imshow("YOLOv5 - Image Detection", results.ims[0])
cv2.waitKey(0)
cv2.destroyAllWindows()
