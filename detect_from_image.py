import torch
import cv2
import os
import numpy as np
import matplotlib.pyplot as plt
from collections import Counter

# üß† YOLOv5 –∑–∞–≥–≤–∞—Ä –∞—á–∞–∞–ª–ª–∞—Ö
model = torch.hub.load('ultralytics/yolov5', 'yolov5s', verbose=False)

# üì∑ –ó—É—Ä–∞–≥ —É–Ω—à–∏—Ö
image_path = "img1.png"  # –ó—É—Ä–∞–≥–Ω—ã –Ω—ç—Ä—ç—ç —Ç–æ—Ö–∏—Ä—É—É–ª–Ω–∞
image = cv2.imread(image_path)

if image is None:
    print("‚ùå –ó—É—Ä–∞–≥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –ó–∞–º—ã–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É.")
    exit()

# üìç –¢”©–≤–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö
frame_width = image.shape[1]
center_x = frame_width // 2

# üé® –ì—ç—Ä–ª—ç–Ω –¥–æ—Ö–∏–æ–Ω—ã ”©–Ω–≥”© —Ç–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü
def get_dominant_color(cropped_img):
    hsv = cv2.cvtColor(cropped_img, cv2.COLOR_BGR2HSV)
    avg_color = hsv.mean(axis=0).mean(axis=0)
    h = avg_color[0]
    if 0 <= h <= 25:
        return 'red'
    elif 26 <= h <= 35:
        return 'yellow'
    elif 36 <= h <= 85:
        return 'green'
    else:
        return 'unknown'

# üß† YOLO-—Ä —Ç–∞–Ω–∏—Ö
results = model(image)
names = results.names
detections = results.xyxy[0]

messages = []
detected_labels = []
confidences = []

# üîç –ò–ª—ç—Ä—Å—ç–Ω –æ–±—å–µ–∫—Ç –±“Ø—Ä–∏–π–≥ —à–∞–ª–≥–∞—Ö
for *box, conf, cls in detections:
    x1, y1, x2, y2 = map(int, box)
    class_name = names[int(cls)]
    detected_labels.append(class_name)
    confidences.append(float(conf))

    x_center = (x1 + x2) // 2
    side = "left" if x_center < center_x else "right"

    # üö¶ –ì—ç—Ä–ª—ç–Ω –¥–æ—Ö–∏–æ —Ç–∞–Ω–∏—Ö
    if class_name == "traffic light":
        cropped = image[y1:y2, x1:x2]
        color = get_dominant_color(cropped)
        messages.append(f"Traffic light is {color}")

    # üö∏ –ó–∞–º—ã–Ω —Ç—ç–º–¥—ç–≥
    elif "sign" in class_name or "traffic" in class_name:
        messages.append(f"Road sign detected: {class_name}")

    # üß± –ë—É—Å–∞–¥
    else:
        messages.append(f"{class_name} on the {side}, go {'right' if side == 'left' else 'left'}")

# üîä Mac –¥—ç—ç—Ä —Ö—ç–ª—ç—Ö
if messages:
    final_msg = " | ".join(messages)
    print("üó£", final_msg)
    os.system(f"say '{final_msg}'")

# üñº –ò–ª—ç—Ä—Å—ç–Ω –æ–±—å–µ–∫—Ç—É—É–¥—ã–≥ –∑—É—Ä–∞–≥ –¥—ç—ç—Ä —Ö–∞—Ä—É—É–ª–∞—Ö
results.render()
cv2.imshow("YOLOv5 - Object Detection", results.ims[0])
cv2.waitKey(0)
cv2.destroyAllWindows()

# üìä –ì—Ä–∞—Ñ–∏–∫ 1: –û–±—å–µ–∫—Ç –±“Ø—Ä–∏–π–Ω —Ç–æ–æ
label_counts = Counter(detected_labels)
plt.figure(figsize=(10, 5))
plt.bar(label_counts.keys(), label_counts.values(), color='skyblue', edgecolor='black')
plt.title("Detected Object Count")
plt.xlabel("Class")
plt.ylabel("Frequency")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# üìà –ì—Ä–∞—Ñ–∏–∫ 2: Confidence —Ç–∞—Ä—Ö–∞–ª—Ç
plt.figure(figsize=(8, 4))
plt.hist(confidences, bins=10, color='lightgreen', edgecolor='black')
plt.title("Confidence Score Distribution")
plt.xlabel("Confidence")
plt.ylabel("Count")
plt.grid(True)
plt.tight_layout()
plt.show()
